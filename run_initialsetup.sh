#!/bin/bash
# This script sets up the CAR-GALLERY-PRO project from scratch
# in a local environment, including the database and dependencies.

echo "🚀 Starting CAR-GALLERY-PRO Setup..."
echo "----------------------------------------------------"

# Stop the script on any error
set -e

# --- Step 0: Basic Settings and Functions ---
echo "▶ Checking basic system settings..."
sudo -v # Request sudo password at the beginning

# Error message function
function error_message {
  echo "❌ ERROR: $1"
  echo "Setup stopped."
  exit 1
}

# --- Step 1: PostgreSQL Database and User ---
echo "▶ Creating PostgreSQL database and user..."
DB_NAME="car_dealer_db"
DB_USER="dealer_user"
DB_PASS="DealerPass123!"
PG_HBA_CONF="/var/lib/postgres/data/pg_hba.conf"

# Ensure PostgreSQL service is running
sudo systemctl start postgresql.service || error_message "Could not start PostgreSQL service."

# Temporarily change security settings to allow password-less operations
sudo cp "$PG_HBA_CONF" "$PG_HBA_CONF.bak"
echo "--> Temporarily setting security to 'peer' mode..."
sudo sed -i "s/trust/peer/g" "$PG_HBA_CONF"
sudo sed -i "s/md5/peer/g" "$PG_HBA_CONF"
sudo systemctl restart postgresql.service

# Create the database and user (password-less via sudo -u postgres)
sudo -u postgres psql -c "DROP DATABASE IF EXISTS $DB_NAME;" || true
sudo -u postgres psql -c "DROP USER IF EXISTS $DB_USER;" || true
sudo -u postgres psql -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASS';"
sudo -u postgres psql -c "ALTER USER $DB_USER WITH CREATEDB;"
sudo -u postgres psql -c "CREATE DATABASE $DB_NAME OWNER $DB_USER;"

# Restore security settings
echo "--> Restoring original security settings..."
sudo mv "$PG_HBA_CONF.bak" "$PG_HBA_CONF"
sudo systemctl restart postgresql.service
echo "✔ Database '$DB_NAME' and user '$DB_USER' created successfully."
echo

# --- Step 2: Setup Environment Variables ---
echo "▶ Configuring .env file..."
NEXTAUTH_SECRET=$(openssl rand -base64 32)
cat << EOF > .env
# This file was auto-generated by the setup script.

# Database
DATABASE_URL="postgresql://${DB_USER}:${DB_PASS}@localhost:5432/${DB_NAME}?schema=public"

# NextAuth Configuration
NEXTAUTH_SECRET="${NEXTAUTH_SECRET}"
NEXTAUTH_URL="http://localhost:3000"

# Other services (leave blank if not used)
AWS_ACCESS_KEY_ID=""
AWS_SECRET_ACCESS_KEY=""
AWS_REGION=""
AWS_BUCKET_NAME=""
RESEND_API_KEY=""
NEXT_PUBLIC_TINYMCE_API_KEY=""
UPSTASH_REDIS_REST_URL=""
UPSTASH_REDIS_REST_TOKEN=""
OPENAI_API_KEY=""
EOF
echo "✔ .env file created successfully."
echo

# --- Step 3: Node.js and Package Installation ---
echo "▶ Switching to required Node.js version and installing packages..."
source "$HOME/.nvm/nvm.sh"
nvm use --lts

echo "--> Removing previous node_modules..."
rm -rf node_modules

echo "--> Installing packages (This may take a while depending on your network)..."
npm install || error_message "'npm install' failed. Please check your network connection and try again."
echo "✔ Packages installed successfully."
echo

# --- Step 4: Prepare Database ---
echo "▶ Creating database tables (migrate)..."
npx prisma migrate dev --name init || error_message "'prisma migrate' failed."
echo "✔ Tables created successfully."
echo

echo "▶ Seeding database with sample data..."
npx prisma db seed || error_message "'prisma db seed' failed."
echo "✔ Database seeding complete."
echo

# --- Step 5: Finish ---
echo "🎉 SETUP SUCCESSFULLY COMPLETED! 🎉"
echo "Your CAR-GALLERY-PRO project is ready to go."
echo
echo "To start the development server:"
echo "npm run dev"
echo
echo "To log in to the admin panel:"
echo "URL: http://localhost:3000/auth/sign-in"
echo "Email: admin@example.com"
echo "Password: admin123"
echo "----------------------------------------------------"
